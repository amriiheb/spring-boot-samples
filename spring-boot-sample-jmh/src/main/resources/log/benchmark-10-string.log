# JMH version: 1.21
# VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
# VM invoker: C:\Program Files\Java\jdk-10.0.1\bin\java.exe
# VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\lib\idea_rt.jar=54668:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\bin -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.wxs.jmh.services.JmhStringService.stringAdd

# Run progress: 0.00% complete, ETA 00:05:20
# Fork: 1 of 2
# Warmup Iteration   1: 24.660 ops/ms
# Warmup Iteration   2: 25.364 ops/ms
# Warmup Iteration   3: 25.712 ops/ms
Iteration   1: 26.230 ops/ms
Iteration   2: 25.798 ops/ms
Iteration   3: 23.837 ops/ms
Iteration   4: 26.544 ops/ms
Iteration   5: 27.220 ops/ms
Iteration   6: 26.924 ops/ms
Iteration   7: 27.380 ops/ms
Iteration   8: 27.250 ops/ms
Iteration   9: 26.107 ops/ms
Iteration  10: 27.573 ops/ms

# Run progress: 25.00% complete, ETA 00:04:05
# Fork: 2 of 2
# Warmup Iteration   1: 24.903 ops/ms
# Warmup Iteration   2: 26.774 ops/ms
# Warmup Iteration   3: 25.121 ops/ms
Iteration   1: 26.661 ops/ms
Iteration   2: 26.486 ops/ms
Iteration   3: 27.341 ops/ms
Iteration   4: 26.262 ops/ms
Iteration   5: 26.849 ops/ms
Iteration   6: 26.640 ops/ms
Iteration   7: 27.018 ops/ms
Iteration   8: 26.466 ops/ms
Iteration   9: 27.066 ops/ms
Iteration  10: 26.090 ops/ms


Result "com.wxs.jmh.services.JmhStringService.stringAdd":
  26.587 ±(99.9%) 0.705 ops/ms [Average]
  (min, avg, max) = (23.837, 26.587, 27.573), stdev = 0.812
  CI (99.9%): [25.882, 27.292] (assumes normal distribution)


# JMH version: 1.21
# VM version: JDK 10.0.1, Java HotSpot(TM) 64-Bit Server VM, 10.0.1+10
# VM invoker: C:\Program Files\Java\jdk-10.0.1\bin\java.exe
# VM options: -javaagent:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\lib\idea_rt.jar=54668:D:\Program Files\JetBrains\IntelliJ IDEA 2018.1.5\bin -Dfile.encoding=UTF-8
# Warmup: 3 iterations, 10 s each
# Measurement: 10 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 8 threads, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: com.wxs.jmh.services.JmhStringService.stringBuilderAdd

# Run progress: 50.00% complete, ETA 00:02:43
# Fork: 1 of 2
# Warmup Iteration   1: 26.416 ops/ms
# Warmup Iteration   2: 27.234 ops/ms
# Warmup Iteration   3: 27.214 ops/ms
Iteration   1: 27.349 ops/ms
Iteration   2: 25.241 ops/ms
Iteration   3: 26.835 ops/ms
Iteration   4: 28.001 ops/ms
Iteration   5: 26.852 ops/ms
Iteration   6: 27.573 ops/ms
Iteration   7: 27.701 ops/ms
Iteration   8: 28.034 ops/ms
Iteration   9: 27.495 ops/ms
Iteration  10: 27.559 ops/ms

# Run progress: 75.00% complete, ETA 00:01:21
# Fork: 2 of 2
# Warmup Iteration   1: 25.950 ops/ms
# Warmup Iteration   2: 26.381 ops/ms
# Warmup Iteration   3: 26.056 ops/ms
Iteration   1: 26.697 ops/ms
Iteration   2: 26.825 ops/ms
Iteration   3: 27.030 ops/ms
Iteration   4: 26.805 ops/ms
Iteration   5: 26.463 ops/ms
Iteration   6: 27.228 ops/ms
Iteration   7: 26.440 ops/ms
Iteration   8: 26.683 ops/ms
Iteration   9: 27.272 ops/ms
Iteration  10: 27.191 ops/ms


Result "com.wxs.jmh.services.JmhStringService.stringBuilderAdd":
  27.064 ±(99.9%) 0.551 ops/ms [Average]
  (min, avg, max) = (25.241, 27.064, 28.034), stdev = 0.635
  CI (99.9%): [26.512, 27.615] (assumes normal distribution)


# Run complete. Total time: 00:05:27

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt   Score   Error   Units
JmhStringService.stringAdd         thrpt   20  26.587 ± 0.705  ops/ms
JmhStringService.stringBuilderAdd  thrpt   20  27.064 ± 0.551  ops/ms
